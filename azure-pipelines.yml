variables:
  GITHUB_OAUTH_CONNECTION_NAME: 'github-ens4dz'
  GITHUB_MICROPY_REPO: 'ens4dz/micropython'
  GITHUB_RELEASE_TAG: 'latest-build'
  MAKEOPTS: "-j4"

stages:
- stage: build
  displayName: 'Test and build'
  jobs:
  - job: port_esp8266
    displayName: 'esp8266 port build'
    pool:
      vmImage: 'ubuntu-latest'
  
    steps:
    - checkout: self

    - script: |
        sudo apt-get install python-pip python3-pip
        sudo pip3 install pyparsing
        sudo pip install pyserial
        wget https://github.com/jepler/esp-open-sdk/releases/download/2018-06-10/xtensa-lx106-elf-standalone.tar.gz
        zcat xtensa-lx106-elf-standalone.tar.gz | tar x
      displayName: 'Install dependencies and toolchain'
  
    - script: |
        export PATH=$(pwd)/xtensa-lx106-elf/bin:$PATH
        make ${MAKEOPTS} -C mpy-cross
        make ${MAKEOPTS} -C ports/esp8266 submodules
        make ${MAKEOPTS} -C ports/esp8266
      displayName: 'Build'

    - script: |
        cd ports/esp8266/build-GENERIC
        find . \! -name '*.bin' -delete
        cd -
      displayName: 'Cleanup build before publishing'

    - task: PublishPipelineArtifact@1
      displayName: 'Collect the build'
      inputs:
        targetPath: '$(Build.Repository.LocalPath)/ports/esp8266/build-GENERIC'
        artifact: 'build_esp8266'
  
  - job: port_gprs_a9
    displayName: 'gprs_a9 build'
    pool:
      vmImage: 'ubuntu-latest'
  
    steps:
    - checkout: self
  
    - script: git submodule update --init --recursive lib/axtls lib/GPRS_C_SDK lib/csdtk42-linux
      displayName: 'Checkout submodules'

    - script: |
        sudo apt-get update
        sudo apt-get install build-essential gcc-multilib g++-multilib libzip-dev zlib1g lib32z1 python3
      displayName: 'Install dependencies'
  
    - script: |
        make ${MAKEOPTS} -C mpy-cross
        cd ports/gprs_a9
        make
      displayName: 'Build'

    - task: PublishPipelineArtifact@1
      displayName: 'Collect the build'
      inputs:
        targetPath: '$(Build.Repository.LocalPath)/ports/gprs_a9/hex'
        artifact: 'build_gprs_a9'

- stage: publish
  displayName: 'Publish builds'
  dependsOn: build
  jobs:
  - job: publish
    displayName: 'Download and publish builds'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download all builds'
      inputs:
        buildType: 'current'
        targetPath: '$(Build.BinariesDirectory)'

    - script: |
        mv $(Build.BinariesDirectory)/build_gprs_a9/*.lod $(Build.BinariesDirectory)
        rm -rf $(Build.BinariesDirectory)/build_gprs_a9
        mv $(Build.BinariesDirectory)/build_esp8266/*.bin $(Build.BinariesDirectory)
        rm -rf $(Build.BinariesDirectory)/build_esp8266
        mv $(Build.BinariesDirectory)/build_unix/micropython $(Build.BinariesDirectory)
        rm -rf $(Build.BinariesDirectory)/build_unix
      displayName: 'Sort and filter binaries'

    - task: GitHubRelease@0
      displayName: 'Publish on Github releases'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        gitHubConnection: $(GITHUB_OAUTH_CONNECTION_NAME)
        repositoryName: $(GITHUB_MICROPY_REPO)
        action: 'edit'
        target: '$(Build.SourceVersion)'
        tag: $(GITHUB_RELEASE_TAG)
        title: 'Latest master build'
        releaseNotesSource: 'input'
        releaseNotes: |
          The latest successful `master` build.

          Updated: $(Year:yy)-$(Month)-$(DayOfMonth) $(Hours):$(Minutes):$(Seconds)

          Firmware files
          --------------

          - **unix**

          - [micropython](https://github.com/$(GITHUB_MICROPY_REPO)/releases/download/$(GITHUB_RELEASE_TAG)/micropython)

          - **gprs_a9**

            Burn instructions: use [cooltools](https://ai-thinker-open.github.io/GPRS_C_SDK_DOC/en/c-sdk/burn-debug.html)

            Firmware files:
            - [firmware_debug_full.lod](https://github.com/$(GITHUB_MICROPY_REPO)/releases/download/$(GITHUB_RELEASE_TAG)/firmware_debug_full.lod)
            - [firmware_debug_flash.lod](https://github.com/$(GITHUB_MICROPY_REPO)/releases/download/$(GITHUB_RELEASE_TAG)/firmware_debug_flash.lod)

          - **esp8266**

            Burn instructions: use [esptool](https://github.com/espressif/esptool)

            Firmware files:
            - [firmware_combined.bin](https://github.com/$(GITHUB_MICROPY_REPO)/releases/download/$(GITHUB_RELEASE_TAG)/firmware-combined.bin)
        assets: '$(Build.BinariesDirectory)/*'
        assetUploadMode: 'replace'
        isPreRelease: true
        addChangeLog: false

